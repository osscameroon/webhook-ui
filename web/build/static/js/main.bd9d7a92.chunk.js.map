{"version":3,"sources":["ColorModeSwitcher.tsx","components/PasswordInput.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","PasswordInput","setToken","React","show","setShow","pr","type","placeholder","onChange","event","target","value","width","h","webhookurl","TokenInput","tokenIsSet","setTokenIsSet","pb","isFullWidth","CommandButton","token","command","setOutput","axios","get","then","response","console","log","data","catch","error","HookList","list","setList","output","colorMode","pt","map","index","maxW","textAlign","w","style","overflowX","language","showLineNumbers","startingLineNumber","theme","solarizedLight","solarizedDark","App","minH","p","justifySelf","rowSpan","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oMAWaA,EAAsD,SAACC,GAAW,IACrEC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACTC,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASZ,EACTa,KAAM,cAACT,EAAD,IACNU,aAAA,oBAAyBZ,EAAzB,UACIH,K,QCvBGgB,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAoB,EAC1BC,YAAe,GADW,mBAC3CC,EAD2C,KACrCC,EADqC,KAIlD,OACE,eAAC,IAAD,CAAYZ,KAAK,KAAjB,UACE,cAAC,IAAD,CACEa,GAAG,SACHC,KAAMH,EAAO,OAAS,WACtBI,YAAY,cACZC,SAAU,SAACC,GAAWR,EAASQ,EAAMC,OAAOC,UAE9C,cAAC,IAAD,CAAmBC,MAAM,SAAzB,SACE,cAAC,IAAD,CAAQC,EAAE,UAAUrB,KAAK,KAAKK,QAXhB,kBAAMO,GAASD,IAW7B,SACGA,EAAO,OAAS,e,yBCErBW,EAAa,mCAEbC,EAAa,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,WAAYC,EAAmC,EAAnCA,cAAehB,EAAoB,EAApBA,SAC/C,OACE,qCACE,eAAC,IAAD,CAAMiB,GAAI,EAAGzB,SAAS,KAAtB,6BACkB,mBAAGE,MAAM,WAAT,SAAqBmB,QAErCE,GAAc,cAAC,EAAD,CAAef,SAAUA,KACvCe,GACA,cAAC,IAAD,CAAQnB,QAAS,kBAAMoB,GAAc,IAAOE,aAAW,EAAvD,kBAIDH,GACC,cAAC,IAAD,CAAQnB,QAAS,kBAAMoB,GAAc,IAAQE,aAAW,EAAxD,6BAQFC,EAAgB,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,UACjC1B,EAAUK,eAAkB,WAChCqB,EAAU,cACVC,IACGC,IADH,UACUX,EADV,iBAC6BQ,EAD7B,kBAC8CD,IAC3CK,MAAK,SAAUC,GACdC,QAAQC,IAAIF,EAASG,MACrBF,QAAQC,IAAIF,GACZJ,EAAUI,EAASG,SAEpBC,OAAM,SAAUC,GACfT,EAAUS,QAEb,CAACV,EAASC,EAAWF,IAExB,OACE,cAAC,IAAD,CAAQxB,QAASA,EAASsB,aAAW,EAArC,SACGG,KAKDW,EAAW,SAAC,GAAoB,IAAlBZ,EAAiB,EAAjBA,MAAiB,EACXnB,WAAe,IADJ,mBAC5BgC,EAD4B,KACtBC,EADsB,OAEPjC,WAAe,sBAFR,mBAE5BkC,EAF4B,KAEpBb,EAFoB,OAGIrC,cAA/BmD,EAH2B,EAG3BA,UAH2B,EAGhBpD,gBAcnB,OAZAiB,aAAgB,WACdsB,IACGC,IADH,UACUX,EADV,iCAC6CO,IAC1CK,MAAK,SAAUC,GACdQ,EAAQR,EAASG,SAElBC,OAAM,SAAUC,GAEfJ,QAAQC,IAAIG,QAEf,IAGD,qCACE,cAAC,IAAD,CAAMM,GAAI,EAAV,wBACA,cAAC,IAAD,IACCJ,EAAKK,KAAI,SAACjB,EAASkB,GAAV,OACR,cAAC,EAAD,CAEElB,QAASA,EACTC,UAAWA,EACXF,MAAOA,GAHFmB,MAMT,cAAC,IAAD,CAAMF,GAAI,EAAV,sBACA,cAAC,IAAD,IACA,cAAC,IAAD,CAAMG,KAAM,CAAC,KAAM,KAAM,MAAO,OAAQC,UAAU,QAAQjD,SAAS,KAAKkD,EAAG,CAAC,OAAQ,QAASC,MAAO,CAACC,UAAW,UAAhH,SACE,cAAC,IAAD,CACED,MAAO,CAAEC,UAAW,UACpB1D,KAAMiD,EACNU,SAAS,OACTC,iBAAiB,EACjBC,mBAAoB,EACpBC,MAAqB,UAAdZ,EAAwBa,IAAiBC,YAO7CC,EAAM,WAAO,IAAD,EACGlD,WAAe,IADlB,mBAChBmB,EADgB,KACTpB,EADS,OAEaC,YAAe,GAF5B,mBAEhBc,EAFgB,KAEJC,EAFI,KAIvB,OACE,cAAC,IAAD,CAAgBgC,MAAOA,IAAvB,SACE,cAAC,IAAD,CAAKP,UAAU,SAASjD,SAAS,KAAjC,SACE,eAAC,IAAD,CAAM4D,KAAK,QAAQC,EAAG,EAAtB,UACE,cAAC,IAAD,CAAUC,YAAY,WAAWC,QAAS,EAA1C,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAUA,QAASxC,EAAa,GAAK,EAArC,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,CACEA,WAAYA,EACZC,cAAeA,EACfhB,SAAUA,IAEXe,GAAc,cAAC,EAAD,CAAUK,MAAOA,mBCnHjCoC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,gCAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGMO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAACmD,GACLA,EAAaC,gBAEd/C,OAAM,SAACC,GACNJ,QAAQI,MAAMA,EAAM+C,YCvH5BtB,M","file":"static/js/main.bd9d7a92.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\";\nimport { Input, InputGroup, InputRightElement, Button } from \"@chakra-ui/react\";\n\nexport const PasswordInput = ({ setToken }: any) => {\n  const [show, setShow] = React.useState(false);\n  const handleClick = () => setShow(!show);\n\n  return (\n    <InputGroup size=\"md\">\n      <Input\n        pr=\"4.5rem\"\n        type={show ? \"text\" : \"password\"}\n        placeholder=\"Enter token\"\n        onChange={(event) => {setToken(event.target.value)}}\n      />\n      <InputRightElement width=\"4.5rem\">\n        <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n          {show ? \"Hide\" : \"Show\"}\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  );\n};\n","import * as React from \"react\";\nimport {\n  ChakraProvider,\n  Box,\n  Grid,\n  theme,\n  Center,\n  GridItem,\n  Button,\n  Text,\n  VStack,\n  Divider,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { PasswordInput } from \"./components/PasswordInput\";\nimport axios from \"axios\";\nimport { CodeBlock, solarizedLight, solarizedDark } from \"react-code-blocks\";\n\nconst webhookurl = \"https://webhooks.osscameroon.com\";\n\nconst TokenInput = ({ tokenIsSet, setTokenIsSet, setToken }: any) => {\n  return (\n    <>\n      <Text pb={5} fontSize=\"md\">\n        Your webhook is <i color=\"gray.200\">{webhookurl}</i>\n      </Text>\n      {!tokenIsSet && <PasswordInput setToken={setToken} />}\n      {!tokenIsSet && (\n        <Button onClick={() => setTokenIsSet(true)} isFullWidth>\n          Send\n        </Button>\n      )}\n      {tokenIsSet && (\n        <Button onClick={() => setTokenIsSet(false)} isFullWidth>\n          Reset token\n        </Button>\n      )}\n    </>\n  );\n};\n\nconst CommandButton = ({ token, command, setOutput }: any) => {\n  const onClick = React.useCallback(() => {\n    setOutput(\"loading...\");\n    axios\n      .get(`${webhookurl}/hooks${command}?token=${token}`)\n      .then(function (response) {\n        console.log(response.data)\n        console.log(response)\n        setOutput(response.data);\n      })\n      .catch(function (error) {\n        setOutput(error);\n      });\n  }, [command, setOutput, token]);\n\n  return (\n    <Button onClick={onClick} isFullWidth>\n      {command}\n    </Button>\n  );\n};\n\nconst HookList = ({ token }: any) => {\n  const [list, setList] = React.useState([]);\n  const [output, setOutput] = React.useState(\"nothing to show :(\");\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  React.useEffect(() => {\n    axios\n      .get(`${webhookurl}/hooks/commands?token=${token}`)\n      .then(function (response) {\n        setList(response.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <>\n      <Text pt={5}> Commands </Text>\n      <Divider />\n      {list.map((command, index) => (\n        <CommandButton\n          key={index}\n          command={command}\n          setOutput={setOutput}\n          token={token}\n        />\n      ))}\n      <Text pt={5}> Output </Text>\n      <Divider />\n      <Text maxW={[\"xs\", \"xl\", \"2xl\", \"3xl\"]} textAlign=\"start\" fontSize=\"md\" w={[\"100%\", \"100%\"]} style={{overflowX: \"scroll\"}}>\n        <CodeBlock\n          style={{ overflowX: \"scroll\" }}\n          text={output}\n          language=\"bash\"\n          showLineNumbers={true}\n          startingLineNumber={1}\n          theme={colorMode === \"light\" ? solarizedLight : solarizedDark}\n        />\n      </Text>\n    </>\n  );\n};\n\nexport const App = () => {\n  const [token, setToken] = React.useState(\"\");\n  const [tokenIsSet, setTokenIsSet] = React.useState(false);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <GridItem justifySelf=\"flex-end\" rowSpan={1}>\n            <ColorModeSwitcher />\n          </GridItem>\n\n          <GridItem rowSpan={tokenIsSet ? 10 : 0}>\n            <Center>\n              <VStack>\n                <TokenInput\n                  tokenIsSet={tokenIsSet}\n                  setTokenIsSet={setTokenIsSet}\n                  setToken={setToken}\n                />\n                {tokenIsSet && <HookList token={token} />}\n              </VStack>\n            </Center>\n          </GridItem>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}